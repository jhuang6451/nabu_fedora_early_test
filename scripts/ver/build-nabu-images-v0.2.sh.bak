#!/bin/bash

set -e # 如果任何命令失败，则立即退出脚本

# --- 脚本配置 ---
TIMESTAMP=$(date +%Y%m%d)
COPR_REPO="jhuang6451/nabu_fedora_packages_uefi"
FEDORA_RELEASE="42"
ROOTFS_IMG="fedora-nabu-rootfs-${TIMESTAMP}.img"
ESP_IMG="nabu-esp-${TIMESTAMP}.img"
ROOTFS_INITIAL_SIZE="30G"
ESP_SIZE="512M"

# --- 依赖检查 ---
echo "INFO: 正在检查所需工具..."
for cmd in sudo dnf truncate mkfs.ext4 mkfs.vfat guestmount guestunmount rpm2cpio cpio mcopy blkid tune2fs e2fsck resize2fs; do
    if ! command -v $cmd &> /dev/null; then
        echo "错误: 命令 '$cmd' 未找到。请安装必要的软件包。"
        exit 1
    fi
done
echo "INFO: 所有工具均已就绪。"


# --- 阶段 1: 构建 Fedora Rootfs ---
echo "##############################################"
echo "### 阶段 1: 开始构建 Rootfs ($ROOTFS_IMG)"
echo "##############################################"

echo "INFO: 正在创建 ${ROOTFS_INITIAL_SIZE} 大小的镜像文件: ${ROOTFS_IMG}"
truncate -s $ROOTFS_INITIAL_SIZE $ROOTFS_IMG
mkfs.ext4 -L "fedora_root" $ROOTFS_IMG

INSTALL_ROOT=$(mktemp -d)
trap 'sudo umount "$INSTALL_ROOT" 2>/dev/null; rmdir "$INSTALL_ROOT"' EXIT

echo "INFO: 正在挂载Rootfs镜像到临时目录: $INSTALL_ROOT"
sudo mount -o loop $ROOTFS_IMG $INSTALL_ROOT

echo "INFO: 正在启用 COPR 仓库: ${COPR_REPO}"
sudo dnf --installroot=$INSTALL_ROOT --releasever=$FEDORA_RELEASE -y copr enable $COPR_REPO

echo "INFO: 正在使用 DNF 安装系统软件包，这可能需要很长时间..."
sudo dnf --installroot=$INSTALL_ROOT --releasever=$FEDORA_RELEASE --forcearch=aarch64 -y install \
    @workstation-product-environment \
    kernel-sm8150 xiaomi-nabu-firmware xiaomi-nabu-audio \
    qbootctl qrtr pd-mapper rmtfs tqftpserv \
    NetworkManager

# --- 新增: 注入首次启动时自动扩展文件系统的服务 ---
echo "INFO: 正在注入首次启动自动扩展文件系统的服务..."
# 1. 创建服务文件
sudo mkdir -p "$INSTALL_ROOT/etc/systemd/system/"
sudo bash -c "cat > '$INSTALL_ROOT/etc/systemd/system/resize-rootfs.service'" << EOF
[Unit]
Description=Resize root filesystem to fill partition
DefaultDependencies=no
After=systemd-remount-fs.service
Before=shutdown.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/resize-rootfs.sh
StandardOutput=journal+console
StandardError=journal+console
RemainAfterExit=no

[Install]
WantedBy=basic.target
EOF

# 2. 创建执行脚本
sudo mkdir -p "$INSTALL_ROOT/usr/local/bin/"
sudo bash -c "cat > '$INSTALL_ROOT/usr/local/bin/resize-rootfs.sh'" << 'EOF'
#!/bin/bash
set -e
ROOT_PART=$(findmnt -n -o SOURCE /)
echo "INFO: Resizing ${ROOT_PART} to fill the partition..."
resize2fs ${ROOT_PART}
echo "INFO: Filesystem resized. Disabling service for next boot."
# 清理自身，确保只运行一次
rm -f /etc/systemd/system/resize-rootfs.service
rm -f /usr/local/bin/resize-rootfs.sh
EOF

# 3. 设置权限并启用服务
sudo chmod 755 "$INSTALL_ROOT/usr/local/bin/resize-rootfs.sh"
sudo systemd-nspawn -D "$INSTALL_ROOT" systemctl enable resize-rootfs.service
# ----------------------------------------------------

echo 'root:fedora' | sudo chpasswd --root $INSTALL_ROOT
echo "警告: 已设置默认root密码为 'fedora'。首次登录后请立即修改！"

echo "INFO: 卸载 Rootfs 镜像..."
sudo umount $INSTALL_ROOT
rmdir $INSTALL_ROOT
trap - EXIT

# --- 新增: 收缩Rootfs镜像到最小尺寸 ---
echo "INFO: 正在将Rootfs镜像收缩到最小尺寸..."
sudo e2fsck -f -y $ROOTFS_IMG
sudo resize2fs -M $ROOTFS_IMG
BLOCKS=$(sudo tune2fs -l $ROOTFS_IMG | grep 'Block count' | awk '{print $3}')
BLOCK_SIZE=$(sudo tune2fs -l $ROOTFS_IMG | grep 'Block size' | awk '{print $3}')
NEW_SIZE=$((BLOCKS * BLOCK_SIZE))
echo "INFO: Rootfs最小尺寸计算为 ${NEW_SIZE} 字节。"
truncate -s $NEW_SIZE $ROOTFS_IMG
echo "INFO: Rootfs镜像已成功收缩。"
# ------------------------------------

echo "INFO: Rootfs 构建完成: ${ROOTFS_IMG}"


# --- 阶段 2: 构建 ESP (与之前类似，但更新了尺寸和文件名) ---
echo "##############################################"
echo "### 阶段 2: 开始构建 ESP ($ESP_IMG)"
echo "##############################################"
# (此阶段代码与上一版本基本相同，除了ESP_SIZE和ESP_IMG变量已在开头更新)
ESP_WORKDIR=$(mktemp -d)
trap 'rm -rf "$ESP_WORKDIR"' EXIT
echo "INFO: 创建ESP工作目录: $ESP_WORKDIR"
mkdir -p $ESP_WORKDIR/EFI/{BOOT,fedora}
mkdir -p $ESP_WORKDIR/fedora

read -e -p "请输入 refind_aa64.efi 文件的完整路径: " REFIND_EFI_PATH
# ... (复制rEFInd, GRUB, 提取内核和DTB的代码与上一版本完全相同) ...
if [ ! -f "$REFIND_EFI_PATH" ]; then echo "错误: rEFInd 文件未找到: $REFIND_EFI_PATH"; exit 1; fi
REFIND_DIR=$(dirname "$REFIND_EFI_PATH")
cp "$REFIND_EFI_PATH" "$ESP_WORKDIR/EFI/BOOT/BOOTAA64.EFI"
cp "$REFIND_DIR/refind.conf-sample" "$ESP_WORKDIR/EFI/BOOT/refind.conf"
[ -d "$REFIND_DIR/icons" ] && cp -r "$REFIND_DIR/icons" "$ESP_WORKDIR/EFI/BOOT/"
[ -d "$REFIND_DIR/drivers_aa64" ] && cp -r "$REFIND_DIR/drivers_aa64" "$ESP_WORKDIR/EFI/BOOT/"
dnf download --quiet --arch=aarch64 grub2-efi-aa64
rpm2cpio grub2-efi-aa64-*.rpm | cpio -idmv &>/dev/null
cp ./boot/efi/EFI/fedora/grubaa64.efi "$ESP_WORKDIR/EFI/fedora/"
rm -rf boot grub2-efi-aa64-*.rpm
MOUNT_DIR=$(mktemp -d)
trap 'sudo umount "$MOUNT_DIR" 2>/dev/null; rmdir "$MOUNT_DIR"; rm -rf "$ESP_WORKDIR"' EXIT
sudo guestmount -a $ROOTFS_IMG -r -m /dev/sda $MOUNT_DIR
KERNEL_VERSION=$(basename $(ls $MOUNT_DIR/boot/vmlinuz-*))
KERNEL_VERSION=${KERNEL_VERSION#vmlinuz-}
cp "$MOUNT_DIR/boot/vmlinuz-${KERNEL_VERSION}" "$ESP_WORKDIR/fedora/Image"
cp "$MOUNT_DIR/usr/lib/modules/${KERNEL_VERSION}/dtb/qcom/sm8150-xiaomi-nabu.dtb" "$ESP_WORKDIR/fedora/sm8150-xiaomi-nabu.dtb"
sudo guestunmount $MOUNT_DIR
rmdir $MOUNT_DIR
trap 'rm -rf "$ESP_WORKDIR"' EXIT
cat << EOF >> "$ESP_WORKDIR/EFI/BOOT/refind.conf"
menuentry "Fedora Workstation" { loader /EFI/fedora/grubaa64.efi; icon /EFI/BOOT/icons/os_fedora.png; }
EOF
ROOTFS_UUID=$(sudo tune2fs -l $ROOTFS_IMG | grep 'Filesystem UUID' | awk '{print $3}')
truncate -s $ESP_SIZE $ESP_IMG
mkfs.vfat -n "ESP" $ESP_IMG > /dev/null
ESP_UUID=$(sudo blkid $ESP_IMG | sed -n 's/.*UUID="\([^"]*\)".*/\1/p')
cat << EOF > "$ESP_WORKDIR/EFI/fedora/grub.cfg"
set timeout=5
set default="0"
menuentry "Fedora Workstation (nabu)" {
    search --fs-uuid --set=root $ESP_UUID
    linux /fedora/Image root=UUID=$ROOTFS_UUID rw quiet splash
    devicetree /fedora/sm8150-xiaomi-nabu.dtb
}
EOF
mcopy -s -i $ESP_IMG $ESP_WORKDIR/* ::
rm -rf $ESP_WORKDIR
trap - EXIT

echo "##############################################"
echo "### 构建成功！"
echo "##############################################"
echo "生成的镜像文件:"
echo "- Rootfs: ${ROOTFS_IMG} (已收缩至最小尺寸)"
echo "- ESP:    ${ESP_IMG}"